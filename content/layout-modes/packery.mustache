---
title: packery
---

<p>The packery layout mode uses a bin-packing algorithm. This is a fancy way of saying “it fills empty gaps.”</p>

<p><a href="https://packery.metafizzy.co">Packery</a> is available as a stand-alone layout library. See also: <a href="../faq.html#difference-between-isotope-masonry-and-packery">What is the difference between Isotope, Masonry, and Packery?</a></p>

<div class="big-demo go-wide">
  <div class="grid js-isotope" data-isotope-options='{ "layoutMode": "packery" }'>
    {{> grid-splash-items}}
  </div>
  {{> edit-demo default="vdwmb" }}
</div>

{{! --------------------------------------------------- }}

<h2>Install</h2>

<p>This layout mode is not included in <a href="../isotope.pkgd.js">isotope.pkgd.js</a> and must be installed separately.</p>

<p>Download a packaged source file for packery layout mode:</p>

<ul>
  <li><a href="https://raw.githubusercontent.com/metafizzy/isotope-packery/master/packery-mode.pkgd.js">packery-mode.pkgd.js</a></li>
  <li><a href="https://raw.githubusercontent.com/metafizzy/isotope-packery/master/packery-mode.pkgd.min.js">packery-mode.pkgd.min.js</a></li>
</ul>

<p>Install with Bower:</p>

``` bash
bower install isotope-packery
```

<p><a href="https://www.npmjs.com/package/isotope-packery">Install with npm</a>:</p>

``` bash
npm install isotope-packery
```

{{! --------------------------------------------------- }}

<h2>Options</h2>

{{! --------------------------------------------------- }}

<h3>gutter</h3>

<p>The space between item elements, both vertically and horizontally.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    packery: {
      gutter: 10
    }
    ```
  </div>
  <div class="duo__cell example__demo packery-gutter">
    <div class="grid js-isotope grid--packery-gutter" data-isotope-options='{ "layoutMode": "packery", "packery": { "gutter": 10 } }'>
      {{> grid-items-fewer}}
    </div>
    {{> edit-demo default="LBCwy" }}
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Isotope will use the width of that element. See <a href="../options.html#element-sizing">Element sizing</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <div class="grid-sizer"></div>
      <div class="gutter-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item--width2"></div>
      ...
    </div>
    ```
    ``` css
    .grid-sizer,
    .grid-item { width: 22%; }

    .gutter-sizer { width: 4%; }
    /* spans 2 columns: 22% + 4% + 22% = 48% */
    .grid-item--width2 { width: 48%; }
    ```

    ``` js
    layoutMode: 'packery',
    packery: {
      gutter: '.gutter-sizer'
    },
    itemSelector: '.mini-item',
    percentPosition: true
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-gutter js-isotope"
      data-isotope-options='{ "layoutMode": "packery", "itemSelector": ".grid-item", "percentPosition": true, "packery": { "gutter": ".gutter-sizer" } }'>
      <div class="grid-sizer"></div>
      <div class="gutter-sizer"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="fGrKe" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h3>columnWidth</h3>

<p>Aligns items to the width of a column of a horizontal grid.</p>

<p>Unlike <a href="masonry.html">masonry layout</a>, packery layout does not require <code>columnWidth</code>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    layoutMode: 'packery',
    packery: {
      columnWidth: 60
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid js-isotope"
      data-isotope-options='{ "layoutMode": "packery", "packery": { "columnWidth": 60 } }'>
      {{> grid-items-fewer}}
    </div>
    {{> edit-demo default="EoBqg" }}
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Isotope will use the width of that element. See <a href="../options.html#element-sizing">Element sizing</a>. Setting <code>columnWidth</code> with element sizing is recommended if you are using percentage widths.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <div class="grid-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      ...
    </div>
    ```

    ``` css
    .grid-sizer,
    .grid-item { width: 20%; }

    .grid-item--width2 { width: 40%; }
    ```

    ``` js
    layoutMode: 'packery',
    packery: {
      columnWidth: '.grid-sizer'
    },
    itemSelector: '.grid-item',
    percentPosition: true
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-5-col js-isotope"
      data-isotope-options='{ "layoutMode": "packery", "packery": { "columnWidth": ".grid-sizer" }, "itemSelector": ".grid-item", "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="DbciA" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h3>rowHeight</h3>

<p>Aligns items to the height of a row of a vertical grid.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    layoutMode: 'packery',
    packery: {
      rowHeight: 60
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid js-isotope" data-isotope-options='{ "layoutMode": "packery", "packery": { "rowHeight": 60 } }'>
      {{> grid-items-fewer}}
    </div>
    {{> edit-demo default="jhgef" }}
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Isotope will use the height of that element. See <a href="../options.html#element-sizing">Element sizing</a>. Setting <code>rowHeight</code> with element sizing is recommended if you are using media queries.</p>

{{! --------------------------------------------------- }}

<h3>isHorizontal</h3>

<p>Arranges items horizontally instead of vertically.</p>

<p>Set a <a href="../layout-modes.html#horizontal-layouts">container height</a> for horizontal layouts.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    layoutMode: 'packery',
    packery: {
      isHorizontal: true
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--horizontal grid--counting js-isotope"
      data-isotope-options='{ "layoutMode": "packery", "packery": { "isHorizontal": true } }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="AmpsD" }}
  </div>
</div>


{{! --------------------------------------------------- }}

<h2>Stamp</h2>

<p>Packery layout can <a href="../options.html#stamp">stamp</a> items in place. Packery will layout item elements <em>around</em> stamped elements &mdash; even above, unlike Masonry.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    layoutMode: 'packery',
    itemSelector: '.mini-item',
    stamp: '.stamp'
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--has-stamp js-isotope" data-isotope-options='{ "layoutMode": "packery", "itemSelector": ".grid-item", "stamp": ".stamp" }'>
      <div class="stamp stamp--packery"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="Ccnmi" }}
  </div>
</div>

{{! --------------------------------------------------- }}
